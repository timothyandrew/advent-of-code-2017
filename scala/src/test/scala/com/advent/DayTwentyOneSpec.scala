package com.advent

import org.scalatest.{FunSuite, Matchers}

class DayTwentyOneSpec extends FunSuite with Matchers  {
  test("Result Part 1 Short") {
    val rules = Parse.toRule(".#./..#/### => #..#/..../..../#..#") :: Parse.toRule("../.# => ##./#../...") :: Nil
    val image: Image = Parse.toImage(".#./..#/###", rules)

    assert(image.tickMany(2).onPixels == 12)
  }

  test("Result Part 1/2 Long") {
    val rules = Parse.toRule("../.. => .../.../###") :: Parse.toRule("#./.. => .../.#./.##") :: Parse.toRule("##/.. => .#./.#./...") :: Parse.toRule(".#/#. => ###/..#/.##") :: Parse.toRule("##/#. => ..#/###/#..") :: Parse.toRule("##/## => ..#/#../##.") :: Parse.toRule(".../.../... => .##./##../..##/.##.") :: Parse.toRule("#../.../... => ##../.#.#/..#./###.") :: Parse.toRule(".#./.../... => ##.#/#.#./.#../..##") :: Parse.toRule("##./.../... => ...#/##.#/.#.#/#.##") :: Parse.toRule("#.#/.../... => ..#./#.../###./...#") :: Parse.toRule("###/.../... => #.#./...#/#.#./###.") :: Parse.toRule(".#./#../... => ...#/###./.##./...#") :: Parse.toRule("##./#../... => ###./####/###./..##") :: Parse.toRule("..#/#../... => ####/#.../####/#.##") :: Parse.toRule("#.#/#../... => #.##/.#.#/##.#/###.") :: Parse.toRule(".##/#../... => ..../.#../.#.#/.##.") :: Parse.toRule("###/#../... => ..##/##.#/..##/.###") :: Parse.toRule(".../.#./... => ###./..##/.#../#..#") :: Parse.toRule("#../.#./... => ###./.#../#.../#...") :: Parse.toRule(".#./.#./... => ####/..#./.##./##..") :: Parse.toRule("##./.#./... => .#../#.#./###./###.") :: Parse.toRule("#.#/.#./... => ####/.##./##.#/.###") :: Parse.toRule("###/.#./... => #.#./..##/.##./#...") :: Parse.toRule(".#./##./... => ####/#.##/####/..#.") :: Parse.toRule("##./##./... => #.../.#../..../#.##") :: Parse.toRule("..#/##./... => #..#/..##/#.../####") :: Parse.toRule("#.#/##./... => ###./##../..##/#...") :: Parse.toRule(".##/##./... => ..../#.##/.###/#.#.") :: Parse.toRule("###/##./... => .#../##.#/.#../##..") :: Parse.toRule(".../#.#/... => ...#/.###/.##./###.") :: Parse.toRule("#../#.#/... => ###./##../#.#./.##.") :: Parse.toRule(".#./#.#/... => ..#./.#../.##./.###") :: Parse.toRule("##./#.#/... => #.../#.../.##./.#..") :: Parse.toRule("#.#/#.#/... => .##./..##/.###/#...") :: Parse.toRule("###/#.#/... => ..../####/###./....") :: Parse.toRule(".../###/... => #.##/.#.#/#.##/...#") :: Parse.toRule("#../###/... => #.../#.#./.#../#...") :: Parse.toRule(".#./###/... => ...#/###./.##./.#.#") :: Parse.toRule("##./###/... => ##../####/###./#.##") :: Parse.toRule("#.#/###/... => ...#/###./##.#/.#.#") :: Parse.toRule("###/###/... => #.#./##.#/..../.##.") :: Parse.toRule("..#/.../#.. => ...#/..#./..#./##..") :: Parse.toRule("#.#/.../#.. => ..#./#.##/#.#./#.##") :: Parse.toRule(".##/.../#.. => ####/####/#.##/#...") :: Parse.toRule("###/.../#.. => ###./..#./###./.#..") :: Parse.toRule(".##/#../#.. => ...#/####/..../###.") :: Parse.toRule("###/#../#.. => ##.#/.#../##.#/...#") :: Parse.toRule("..#/.#./#.. => ###./#.##/...#/##..") :: Parse.toRule("#.#/.#./#.. => #.../..#./..#./#.##") :: Parse.toRule(".##/.#./#.. => ##.#/...#/#.#./.###") :: Parse.toRule("###/.#./#.. => .#../..##/#.#./..#.") :: Parse.toRule(".##/##./#.. => #.../#.#./.###/#...") :: Parse.toRule("###/##./#.. => .##./.#../.#.#/.###") :: Parse.toRule("#../..#/#.. => ###./#..#/#.../##.#") :: Parse.toRule(".#./..#/#.. => #.#./#..#/#.../.###") :: Parse.toRule("##./..#/#.. => ...#/..##/..#./####") :: Parse.toRule("#.#/..#/#.. => ####/#..#/###./#.#.") :: Parse.toRule(".##/..#/#.. => ..#./..#./..../.##.") :: Parse.toRule("###/..#/#.. => ...#/#..#/#.#./....") :: Parse.toRule("#../#.#/#.. => ..##/.#.#/.###/.##.") :: Parse.toRule(".#./#.#/#.. => ..../##.#/..##/#..#") :: Parse.toRule("##./#.#/#.. => ..#./..##/#..#/#..#") :: Parse.toRule("..#/#.#/#.. => ..#./#.../#.#./##..") :: Parse.toRule("#.#/#.#/#.. => ##.#/..##/.###/...#") :: Parse.toRule(".##/#.#/#.. => #.##/.##./##../#.#.") :: Parse.toRule("###/#.#/#.. => ####/##.#/#..#/#.#.") :: Parse.toRule("#../.##/#.. => ..##/#.#./####/####") :: Parse.toRule(".#./.##/#.. => ##../###./####/....") :: Parse.toRule("##./.##/#.. => .###/####/..#./...#") :: Parse.toRule("#.#/.##/#.. => ###./##../##../#.##") :: Parse.toRule(".##/.##/#.. => ##../.###/####/.#.#") :: Parse.toRule("###/.##/#.. => ##../.##./#.../..#.") :: Parse.toRule("#../###/#.. => #.#./.#.#/#.../....") :: Parse.toRule(".#./###/#.. => .##./##../...#/##..") :: Parse.toRule("##./###/#.. => #.#./..../.##./##.#") :: Parse.toRule("..#/###/#.. => ...#/...#/##.#/...#") :: Parse.toRule("#.#/###/#.. => .##./.###/#..#/.##.") :: Parse.toRule(".##/###/#.. => ####/..##/#.../####") :: Parse.toRule("###/###/#.. => ...#/####/..#./.###") :: Parse.toRule(".#./#.#/.#. => .##./#.##/.##./.###") :: Parse.toRule("##./#.#/.#. => ..##/.#../##.#/###.") :: Parse.toRule("#.#/#.#/.#. => .#../..../.#.#/#...") :: Parse.toRule("###/#.#/.#. => ###./..#./..../#.#.") :: Parse.toRule(".#./###/.#. => #..#/.#../#.../..##") :: Parse.toRule("##./###/.#. => .##./...#/.###/....") :: Parse.toRule("#.#/###/.#. => .###/###./#.#./.#.#") :: Parse.toRule("###/###/.#. => #.##/.#.#/#.#./.##.") :: Parse.toRule("#.#/..#/##. => .###/..../####/####") :: Parse.toRule("###/..#/##. => #.##/###./..##/.##.") :: Parse.toRule(".##/#.#/##. => ..../...#/#..#/..##") :: Parse.toRule("###/#.#/##. => #.##/.#../.#../....") :: Parse.toRule("#.#/.##/##. => ..##/..##/#.../#..#") :: Parse.toRule("###/.##/##. => ##.#/#.../#.##/..##") :: Parse.toRule(".##/###/##. => ...#/..#./##../#.##") :: Parse.toRule("###/###/##. => #.##/#..#/..#./...#") :: Parse.toRule("#.#/.../#.# => ##.#/.#../##.#/.##.") :: Parse.toRule("###/.../#.# => #.#./..##/.#.#/##.#") :: Parse.toRule("###/#../#.# => ..#./#.##/...#/.###") :: Parse.toRule("#.#/.#./#.# => .###/#.##/#..#/#.##") :: Parse.toRule("###/.#./#.# => ..../..#./###./..#.") :: Parse.toRule("###/##./#.# => .###/##../..##/####") :: Parse.toRule("#.#/#.#/#.# => #.#./####/.#../.##.") :: Parse.toRule("###/#.#/#.# => ####/..../..##/#...") :: Parse.toRule("#.#/###/#.# => #.../.##./#.../...#") :: Parse.toRule("###/###/#.# => .#.#/...#/..../..##") :: Parse.toRule("###/#.#/### => .#../#.##/#.##/.###") :: Parse.toRule("###/###/### => #.../.#.#/#..#/#.##") :: Nil
    val image: Image = Parse.toImage(".#./..#/###", rules)

    assert(image.tickMany(5).onPixels == 125)
    assert(image.tickMany(18).onPixels == 1782917)
  }
}